/*
 * Tencent is pleased to support the open source community by making TKEStack
 * available.
 *
 * Copyright (C) 2012-2020 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use
 * this file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 * https://opensource.org/licenses/Apache-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OF ANY KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations under the License.
 */

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1beta1 "tkestack.io/lb-controlling-framework/pkg/apis/lbcf.tkestack.io/v1beta1"
)

// LoadBalancerDriverLister helps list LoadBalancerDrivers.
type LoadBalancerDriverLister interface {
	// List lists all LoadBalancerDrivers in the indexer.
	List(selector labels.Selector) (ret []*v1beta1.LoadBalancerDriver, err error)
	// LoadBalancerDrivers returns an object that can list and get LoadBalancerDrivers.
	LoadBalancerDrivers(namespace string) LoadBalancerDriverNamespaceLister
	LoadBalancerDriverListerExpansion
}

// loadBalancerDriverLister implements the LoadBalancerDriverLister interface.
type loadBalancerDriverLister struct {
	indexer cache.Indexer
}

// NewLoadBalancerDriverLister returns a new LoadBalancerDriverLister.
func NewLoadBalancerDriverLister(indexer cache.Indexer) LoadBalancerDriverLister {
	return &loadBalancerDriverLister{indexer: indexer}
}

// List lists all LoadBalancerDrivers in the indexer.
func (s *loadBalancerDriverLister) List(selector labels.Selector) (ret []*v1beta1.LoadBalancerDriver, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.LoadBalancerDriver))
	})
	return ret, err
}

// LoadBalancerDrivers returns an object that can list and get LoadBalancerDrivers.
func (s *loadBalancerDriverLister) LoadBalancerDrivers(namespace string) LoadBalancerDriverNamespaceLister {
	return loadBalancerDriverNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LoadBalancerDriverNamespaceLister helps list and get LoadBalancerDrivers.
type LoadBalancerDriverNamespaceLister interface {
	// List lists all LoadBalancerDrivers in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1beta1.LoadBalancerDriver, err error)
	// Get retrieves the LoadBalancerDriver from the indexer for a given namespace and name.
	Get(name string) (*v1beta1.LoadBalancerDriver, error)
	LoadBalancerDriverNamespaceListerExpansion
}

// loadBalancerDriverNamespaceLister implements the LoadBalancerDriverNamespaceLister
// interface.
type loadBalancerDriverNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LoadBalancerDrivers in the indexer for a given namespace.
func (s loadBalancerDriverNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.LoadBalancerDriver, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.LoadBalancerDriver))
	})
	return ret, err
}

// Get retrieves the LoadBalancerDriver from the indexer for a given namespace and name.
func (s loadBalancerDriverNamespaceLister) Get(name string) (*v1beta1.LoadBalancerDriver, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("loadbalancerdriver"), name)
	}
	return obj.(*v1beta1.LoadBalancerDriver), nil
}
