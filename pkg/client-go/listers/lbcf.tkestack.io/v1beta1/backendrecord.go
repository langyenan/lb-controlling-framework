/*
 * Tencent is pleased to support the open source community by making TKEStack
 * available.
 *
 * Copyright (C) 2012-2020 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use
 * this file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 * https://opensource.org/licenses/Apache-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OF ANY KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations under the License.
 */

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1beta1 "tkestack.io/lb-controlling-framework/pkg/apis/lbcf.tkestack.io/v1beta1"
)

// BackendRecordLister helps list BackendRecords.
type BackendRecordLister interface {
	// List lists all BackendRecords in the indexer.
	List(selector labels.Selector) (ret []*v1beta1.BackendRecord, err error)
	// BackendRecords returns an object that can list and get BackendRecords.
	BackendRecords(namespace string) BackendRecordNamespaceLister
	BackendRecordListerExpansion
}

// backendRecordLister implements the BackendRecordLister interface.
type backendRecordLister struct {
	indexer cache.Indexer
}

// NewBackendRecordLister returns a new BackendRecordLister.
func NewBackendRecordLister(indexer cache.Indexer) BackendRecordLister {
	return &backendRecordLister{indexer: indexer}
}

// List lists all BackendRecords in the indexer.
func (s *backendRecordLister) List(selector labels.Selector) (ret []*v1beta1.BackendRecord, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.BackendRecord))
	})
	return ret, err
}

// BackendRecords returns an object that can list and get BackendRecords.
func (s *backendRecordLister) BackendRecords(namespace string) BackendRecordNamespaceLister {
	return backendRecordNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BackendRecordNamespaceLister helps list and get BackendRecords.
type BackendRecordNamespaceLister interface {
	// List lists all BackendRecords in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1beta1.BackendRecord, err error)
	// Get retrieves the BackendRecord from the indexer for a given namespace and name.
	Get(name string) (*v1beta1.BackendRecord, error)
	BackendRecordNamespaceListerExpansion
}

// backendRecordNamespaceLister implements the BackendRecordNamespaceLister
// interface.
type backendRecordNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BackendRecords in the indexer for a given namespace.
func (s backendRecordNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.BackendRecord, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.BackendRecord))
	})
	return ret, err
}

// Get retrieves the BackendRecord from the indexer for a given namespace and name.
func (s backendRecordNamespaceLister) Get(name string) (*v1beta1.BackendRecord, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("backendrecord"), name)
	}
	return obj.(*v1beta1.BackendRecord), nil
}
