/*
 * Tencent is pleased to support the open source community by making TKEStack
 * available.
 *
 * Copyright (C) 2012-2019 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use
 * this file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 * https://opensource.org/licenses/Apache-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OF ANY KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations under the License.
 */

// Code generated by client-gen. DO NOT EDIT.

package v1beta1

import (
	"time"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
	v1beta1 "tkestack.io/lb-controlling-framework/pkg/apis/lbcf.tkestack.io/v1beta1"
	scheme "tkestack.io/lb-controlling-framework/pkg/client-go/clientset/versioned/scheme"
)

// LoadBalancerDriversGetter has a method to return a LoadBalancerDriverInterface.
// A group's client should implement this interface.
type LoadBalancerDriversGetter interface {
	LoadBalancerDrivers(namespace string) LoadBalancerDriverInterface
}

// LoadBalancerDriverInterface has methods to work with LoadBalancerDriver resources.
type LoadBalancerDriverInterface interface {
	Create(*v1beta1.LoadBalancerDriver) (*v1beta1.LoadBalancerDriver, error)
	Update(*v1beta1.LoadBalancerDriver) (*v1beta1.LoadBalancerDriver, error)
	UpdateStatus(*v1beta1.LoadBalancerDriver) (*v1beta1.LoadBalancerDriver, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1beta1.LoadBalancerDriver, error)
	List(opts v1.ListOptions) (*v1beta1.LoadBalancerDriverList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1beta1.LoadBalancerDriver, err error)
	LoadBalancerDriverExpansion
}

// loadBalancerDrivers implements LoadBalancerDriverInterface
type loadBalancerDrivers struct {
	client rest.Interface
	ns     string
}

// newLoadBalancerDrivers returns a LoadBalancerDrivers
func newLoadBalancerDrivers(c *LbcfV1beta1Client, namespace string) *loadBalancerDrivers {
	return &loadBalancerDrivers{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the loadBalancerDriver, and returns the corresponding loadBalancerDriver object, and an error if there is any.
func (c *loadBalancerDrivers) Get(name string, options v1.GetOptions) (result *v1beta1.LoadBalancerDriver, err error) {
	result = &v1beta1.LoadBalancerDriver{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("loadbalancerdrivers").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of LoadBalancerDrivers that match those selectors.
func (c *loadBalancerDrivers) List(opts v1.ListOptions) (result *v1beta1.LoadBalancerDriverList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1beta1.LoadBalancerDriverList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("loadbalancerdrivers").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested loadBalancerDrivers.
func (c *loadBalancerDrivers) Watch(opts v1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("loadbalancerdrivers").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch()
}

// Create takes the representation of a loadBalancerDriver and creates it.  Returns the server's representation of the loadBalancerDriver, and an error, if there is any.
func (c *loadBalancerDrivers) Create(loadBalancerDriver *v1beta1.LoadBalancerDriver) (result *v1beta1.LoadBalancerDriver, err error) {
	result = &v1beta1.LoadBalancerDriver{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("loadbalancerdrivers").
		Body(loadBalancerDriver).
		Do().
		Into(result)
	return
}

// Update takes the representation of a loadBalancerDriver and updates it. Returns the server's representation of the loadBalancerDriver, and an error, if there is any.
func (c *loadBalancerDrivers) Update(loadBalancerDriver *v1beta1.LoadBalancerDriver) (result *v1beta1.LoadBalancerDriver, err error) {
	result = &v1beta1.LoadBalancerDriver{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("loadbalancerdrivers").
		Name(loadBalancerDriver.Name).
		Body(loadBalancerDriver).
		Do().
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().

func (c *loadBalancerDrivers) UpdateStatus(loadBalancerDriver *v1beta1.LoadBalancerDriver) (result *v1beta1.LoadBalancerDriver, err error) {
	result = &v1beta1.LoadBalancerDriver{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("loadbalancerdrivers").
		Name(loadBalancerDriver.Name).
		SubResource("status").
		Body(loadBalancerDriver).
		Do().
		Into(result)
	return
}

// Delete takes name of the loadBalancerDriver and deletes it. Returns an error if one occurs.
func (c *loadBalancerDrivers) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("loadbalancerdrivers").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *loadBalancerDrivers) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	var timeout time.Duration
	if listOptions.TimeoutSeconds != nil {
		timeout = time.Duration(*listOptions.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("loadbalancerdrivers").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Timeout(timeout).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched loadBalancerDriver.
func (c *loadBalancerDrivers) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1beta1.LoadBalancerDriver, err error) {
	result = &v1beta1.LoadBalancerDriver{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("loadbalancerdrivers").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
